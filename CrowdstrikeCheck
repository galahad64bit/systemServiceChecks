package crowdstrike

import (
	"context"
	"bytes"
	"errors"
	"fmt"
	"io/fs"
	"os"
	"os/exec"
	"strings"

	"google3/third_party/golang/stringset/stringset"
)

var (
	pkgName       = "falcon-sensor"
	processPath   = "/opt/CrowdStrike/falconctl"

	// Server CID: CA7F54901CDA488496503085C99B2F3D-A6
	// Client CID: F3C9100733704C2999046FEDA48410B7-2D

	// cidServer     = "ca7f54901cda488496503085c99b2f3d"
	cidClient = "f3c9100733704c2999046feda48410b7"
)

func main(){
// TODO: catch return strings and run correlating function
}

func checkCrowdStrike(ctx context.Context) (string, error) {
	fmt.Println("Checking if crowdstrike package is installed")

	installed, err := isCrowdStrikeInstalled(ctx)
	if err != nil {
		return "", fmt.Error("Failed to check if CrowdStrike is installed")
	}
	if !installed {
		return "install", fmt.Error("CrowdStrike package is not installed")
	}

	// Check if processPath exists, bash way: if [ -f /opt/CrowdStrike/falconctl ]; then echo "exist";fi
	_, err = os.Stat(processPath)
	if errors.Is(err, fs.ErrNotExist) {
		log.ErrorContextf(ctx, "Failed to stat %s: %v", processPath, err)
		return "reinstall" , fmt.Errorf("Failed to stat %s", processPath)
	}

	fmt.Println("Checking if crowdstrike service is running")

	cmd := exec.Cmd("systemctl", "status", "falcon-sensor")

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()
	if err != nil {
		if exitError, ok := err.(*exec.ExitError); ok {
			switch exitError.ExitCode() {
			case 0:
				return fmt.Println("CrowdStrike service is running"), nil
			case 3:
				return "unmask", fmt.Error("CrowdStrike service is masked, will try to unmask")
			case 4:
				return "install", fmt.Error("Failed to run systemctl status falcon-sensor, trying to install") // checkCrowdStrikePackage should install the package, but if it fails, we can try to install it again here
			default:
				return "restart", fmt.Error("Failed to run systemctl status falcon-sensor, trying to restart")
			}
		}
	}
	return fmt.Println("CrowdStrike service seems to be in a healthy state"), nil
}

func isCrowdStrikeInstalled(ctx context.Context) (bool, error) {
	if output, err := exec.Cmd(ctx, "/usr/bin/apt","list", "--installed").Output(); err != nil {
		return false, fmt.Errorf("Failed to run apt --installed list: %v", err)
	} else if !strings.Contains(string(output), pkgName) {
		return false, nil
	}
	return true, nil
}

// TODO: heistant on doing a install and reinstall of crowdstrike. Tabane should be able to do this.
func installCrowdStrike(ctx context.Context) (string,error) {
	fmt.Println("Installing CrowdStrike")
	// install falcon-sensor
	cmd := exec.Cmd(ctx, "/usr/bin/apt-get", cmd.WithArgs("install", pkgName))

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()
	if err != nil {
		return fmt.Errorf("Unable to install %s", pkgName)
	}
	// sudo /opt/CrowdStrike/falconctl -s --cid="F3C9100733704C2999046FEDA48410B7-2D"
	cmd2 = exec.Cmd(processPath,"-s","--cid=F3C9100733704C2999046FEDA48410B7-2D")

	cmd2.Stdout = &stdout
	cmd2.Stderr = &stderr

	err = cmd2.Run()
	if err != nil {
		return fmt.Error("Unable to run falconctl")
	}
	return "restart", nil
}

func reinstallCrowdStrike(ctx context.Context) (string, error) {
	fmt.Println("Reinstalling CrowdStrike")
	// reinstall falcon-sensor
	cmd := exec.CommandContext(ctx,"/usr/bin/apt-get", install", "--reinstall", pkgName)
	
	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr
	
	err := cmd.Run()
	if err != nil {
		return fmt.Errorf("Unable to reinstall %s", pkgName)
	}
	// sudo /opt/CrowdStrike/falconctl -s --cid="F3C9100733704C2999046FEDA48410B7-2D"
	cmd2 := exec.CommandContext(ctx, processPath,"-s", --cid=F3C9100733704C2999046FEDA48410B7-2D") 
	
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err = cmd2.Run()
	if err != nil {
		return fmt.Error("Unable to run falconctl error")
	}
	return "restart", nil
}
func restartCrowdStrike(ctx context.Context) (string, error) {
	fmt.Sprint("Restarting CrowdStrike")
	// restart falcon-sensor
	cmd := exec.CommandContext(ctx, "systemctl", "restart", "falcon-sensor.service")

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr
	
	if err != nil {
		return "reinstall", fmt.Errorf("Unable to restart %s: %v", "falcon-sensor.service", err)
	}
	return fmt.Sprintf("Successfully restarted CrowdStrike")
}

func unmaskCrowdStrike(ctx context.Context) result.Result {
	fmt.Sprint("Unmasking CrowdStrike")
	// unmask falcon-sensor and start it
	
	cmd := exec.CommandContext(ctx, "systemctl", "unmask", "falcon-sensor.service")
	
	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr
	
	err := cmd.Run()
	if err != nil {
		return fmt.Error("unable to unmask falcon-sensor.service")
	}
	cmd2 := exec.CommandContext(ctx, "systemctl", cmd.WithArgs("start", "falcon-sensor.service"))

	cmd.Stdout = &stdout
	cmd.Stderr = &stderr
	
	err = cmd2.Run()
	if err != nil {
		return fmt.Errof("unable to restart falcon-sensor.service")
	}
	return fmt.Sprint("Successfully unmasked CrowdStrike")
}
